//I know this isnt great as we didn't get a complete set of instructions
//The data types are not properly set up as far as array indexing is concerned 
//I just picked two simple functions that should work on the proposed data structures should the arrays be fixed.

#include <iostream>

using namespace std;

enum GameStatus
{
    INIT,
    PLAY, // maybe seperate status into player turn and AI turn?
    PAUSE,
    WIN,
    LOSE,
};
enum TileType
{
    Water,
    Ship,
};
enum ShipType
{
    Carrier,    // 4 tiles
    BattleShip, // 4 tiles
    Cruiser,    // 3 tiles
    Submarine,  // 3 tiles
    Destroyer   // 2 tiles
};
struct Ship
{
    ShipType type;
    //int[4][2] position; // largest ships can be on up to 4 tiles while smallest ship only covers 2 tiles, second array is x/y
    //bool[4] damage;     // true if that section of the ship has been hit.
};
struct Tile
{
    int x;
    int y;
    TileType type;
    char status = '~'; // default tile state is ocean represented by '~'
};

struct GameState
{
    GameStatus status;

    int boardSize = 10;
    //Tile board[2][boardSize][boardSize]; // 2 boards, 1 for each player

    //Ship[2][5] playerShipStatus; // handles data on current status of player ships

    int player1Score;
    int player2Score;
};


int main()

{




    return 0;
}

//Get a guess from player
//Pre: none
//Post: returns guess with x and y variables populated
Tile GetGuess()
{
    Tile guess;
    cout << "Enter x coordinate for guess. ";
    cin >> guess.x;
    cout << "Enter y coordinates for guess. ";
    cin >> guess.y;

    return guess;
}

//Checks a guess and updates board status variable
//Pre: playernumber is assigned, board is defined
//Post: board coordinates status is updated
void CheckGuess(GameState board, int playernumber)
{
    Tile guess = GetGuess(); //get guess from player

    //update coordinates for playernumber board
    if(board[playernumber][guess.x][guess.y].type == Ship)
    {
        board[playernumber[guess.x][guess.y].status = 'H';
    }
}

